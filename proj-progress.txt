General:
Upon execution, if no entry for the day has been inputted ask for the quality of each
topic and save those to a file. If entry has been entered for the day, output message 
indicating that entry has been entered already. The program will have to read the time, 
day, and status of entry at the beginning of execution before prompting user input. 
On saturday - after 7 entries have been entered - the program will present plotted data 
with data analyses like averages, what and how many good days there were, highest and 
lowest rated days, and what areas of improvement are needed(?) The program should also 
be aware of any skipped days. If days are skipped, then it should just roll over to the 
next day.

Quick access to dir on cygwin: 
cd D:/christian_b_molina/Projects/program-projects/cbm-progress-tracker

02/10/2022 ==============
The user input into the files is working properly. I may change how it functions later, but for now it's good. At this point, I will merge the YOGA branch with the main branch. 
Some potential next steps (priority based on order of precedence)
    - Having the program check if a file called "log.txt" exists in the local folder, if it doesn't exist create it, otherwise continue the program. 
    - extracting the user data from file and then to analyze them. 
    - implementing a destructor
    - 

02/09/2022 ==============
Created logdata function member, and I've outlined some methods of obtaining inputs.
---
My previous entry was correct, I just made a string variable called filestr, and appended the fileinput[1][i] data into filestr, then equate data.at(1) to filestr!

Now I need to work on entering the user input for the survey data.
I'll create a member function called void logdata(void), it will provide a space after the date once it is written to the file, then prompt the user to rate certain categories. After each rate, it will provide a space in between the rates. Like so:
    02/03/2022 a b c d e f g
    [date] [rate 1] [rate 2] [rate 3] ... [rate n]
---
The use of vector strings works pretty well. My only issue now is extracting the date from the file stream in order to compare it with the current date.
Using
    date[1][i] = fileinput[0][i];
Causes blank characters to be placed inside date[1][i], this could be because fileinput[1][i] returns a reference to the value. But I think it's still possible to copy what is in a reference to another variable. I think this may be an issue with date(1), and instead I should have fileinput[1][i] return to a separate string and then have all that inserted into date.at(1).

02/04/2022 ==============
I've changed the format a little bit. Now I have three functions.
The highlight is the usage of vector strings. We can use vector strings to read part of the input.
ref:
    https://stackoverflow.com/questions/29143603/reading-part-of-a-line-of-txt-file-in-c
    https://stackoverflow.com/questions/236129/how-do-i-iterate-over-the-words-of-a-string

Next step is to implement this in order to read only the date, and then compare them. 

02/03/2022 ==============
I need to think in depth as to how the program reads and writes - specifically the stream of data.
Perhaps I can have the stream of data written as:
    02/03/2022 a b c d e f g
    [date] [rate 1] [rate 2] [rate 3] ... [rate n]
Then the program would have to read the date only, then compare to the current date. 

Afterwards within the same line, input the ratings asked by the program. 

01/10/2022 ==============
I neeed to figure out one of the two: have the program read from the bottom of the file
or append to the beginning of the file. 
Note: there will be text between dates for the ratings. So that will influence where I
read from in the file. 
[x] Read date and report date
[x] Write to file